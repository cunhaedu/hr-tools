generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  COLLABORATOR
  HR_ADMIN
  ADMIN
}

model Company {
  id               String   @id @default(uuid())
  name             String
  cnpj             String   @unique
  email            String   @unique
  cep              String
  streetNumber     String   @map("street_number")
  street           String
  neighborhood     String
  city             String
  state            String
  phoneNumber      String   @map("phone_number")
  isVerified       Boolean  @default(false) @map("is_verified")
  verificationCode String?  @map("verification_code")
  createdAt        DateTime @default(now())

  users     User[]
  positions Position[]

  @@map("company")
}

model Position {
  id        String @id @default(uuid())
  title     String
  companyId String @map("company_id")

  company                 Company                    @relation(fields: [companyId], references: [id])
  users                   User[]
  relatedEvaluationCycles EvaluationCyclePositions[]

  @@map("position")
}

model User {
  id                      String  @id @default(uuid())
  firstName               String  @map("first_name")
  lastName                String  @map("last_name")
  email                   String  @unique
  password                String?
  isActive                Boolean @default(true) @map("is_active")
  isCompanyRepresentative Boolean @default(false) @map("is_company_representative")
  positionId              String? @map("position_id")
  companyId               String  @map("company_id")

  role Role @default(COLLABORATOR)

  company                Company      @relation(fields: [companyId], references: [id])
  position               Position?    @relation(fields: [positionId], references: [id])
  evaluationsAsEvaluated Evaluation[] @relation("evaluatedUser")
  evaluationsAsEvaluator Evaluation[] @relation("evaluatorUser")

  @@map("user")
}

model Evaluationcycle {
  id                   String   @id @default(uuid())
  title                String
  startDate            DateTime @map("start_date") @db.Date
  endDate              DateTime @map("end_date") @db.Date
  allowSelftEvaluation Boolean  @default(false) @map("allow_self_evaluation")

  evaluations Evaluation[]
  positions   EvaluationCyclePositions[]

  @@map("evaluation_cycle")
}

model EvaluationCyclePositions {
  cycleId    String @map("cycle_id")
  positionId String @map("position_id")

  cycle    Evaluationcycle @relation(fields: [cycleId], references: [id])
  position Position        @relation(fields: [positionId], references: [id])

  @@id([cycleId, positionId])
  @@map("evaluation_cycle_positions")
}

model Evaluation {
  id              String @id @default(uuid())
  evaluatedUserId String @map("evaluated_user_id")
  evaluatorUserId String @map("evaluator_user_id")
  cycleId         String @map("cycle_id")
  companyId       String @map("company_id")

  managerEvaluationAt DateTime? @map("manager_evaluation_at")
  selfEvaluationAt    DateTime? @map("self_evaluation_at")

  managerEvaluationPotentialValue   Decimal? @map("manager_evaluation_potential_value")
  managerEvaluationPerformanceValue Decimal? @map("manager_evaluation_performance_value")

  selfEvaluationPotentialValue   Float? @map("self_evaluation_potential_value")
  selfEvaluationPerformanceValue Float? @map("self_evaluation_performance_value")

  cycle         Evaluationcycle @relation(fields: [cycleId], references: [id])
  evaluatedUser User            @relation(name: "evaluatedUser", fields: [evaluatedUserId], references: [id])
  evaluatorUser User            @relation(name: "evaluatorUser", fields: [evaluatorUserId], references: [id])
}
