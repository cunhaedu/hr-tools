generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id               String   @id @default(uuid())
  name             String
  cnpj             String   @unique
  email            String   @unique
  cep              String
  streetNumber     String   @map("street_number")
  street           String
  neighborhood     String
  city             String
  state            String
  phoneNumber      String   @map("phone_number")
  isVerified       Boolean  @default(false) @map("is_verified")
  verificationCode String?  @map("verification_code")
  createdAt        DateTime @default(now())

  users                    User[]
  positions                Position[]
  organizationalStructures OrganizationalStructure[]

  @@map("company")
}

model OrganizationalStructure {
  id        String  @id @default(uuid())
  name      String
  companyId String  @map("company_id")
  parentId  String? @map("parent_id")

  company Company                  @relation(fields: [companyId], references: [id])
  parent  OrganizationalStructure? @relation("StructureTree", fields: [parentId], references: [id])

  children OrganizationalStructure[] @relation("StructureTree")
  users    User[]

  @@map("organizational_sctructure")
}

model Position {
  id        String @id @default(uuid())
  title     String
  companyId String @map("company_id")

  company Company @relation(fields: [companyId], references: [id])
  users   User[]

  @@map("position")
}

model User {
  id                        String  @id @default(uuid())
  firstName                 String  @map("first_name")
  lastName                  String  @map("last_name")
  email                     String  @unique
  password                  String?
  isActive                  Boolean @default(true) @map("is_active")
  isCompanyRepresentative   Boolean @default(false) @map("is_company_representative")
  organizationalStructureId String? @map("organizational_structure_id")
  positionId                String? @map("position_id")
  companyId                 String  @map("company_id")
  roleId                    String  @map("role_id")

  role                    Role                     @relation(fields: [roleId], references: [id])
  company                 Company                  @relation(fields: [companyId], references: [id])
  position                Position?                @relation(fields: [positionId], references: [id])
  organizationalStructure OrganizationalStructure? @relation(fields: [organizationalStructureId], references: [id])

  @@map("user")
}

model Role {
  id   String @id @default(uuid())
  name String

  permissions Permission[] @relation("role_permission")
  users       User[]

  @@map("rbac_role")
}

model Permission {
  id   String @id @default(uuid())
  name String

  roles Role[] @relation("role_permission")

  @@map("rbac_permission")
}
